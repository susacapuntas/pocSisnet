{
	"info": {
		"_postman_id": "1cbea036-4d02-4bad-ac29-a953a49b3bae",
		"name": "PoC Sisnet",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "LOGIN Command",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9c8d888e-6ce1-406c-84f5-87a4746c5e59",
						"exec": [
							"const xml2js = require('xml2js');\r",
							"const response = pm.response.text();\r",
							"const $ = cheerio.load(response);\r",
							"const xmlPayload = $('return').text();\r",
							"\r",
							"//Parse response\r",
							"xml2js.parseString(xmlPayload, (_, res) => {\r",
							"    let idSession = JSON.stringify(res.ROOT.RESPUESTA[0].IDSESION[0]).replace(/\\\"/g, \"\");\r",
							"    postman.setEnvironmentVariable(\"idSesion\", idSession);\r",
							"});\r",
							"\r",
							"//Response 200\r",
							"pm.test(\"Response is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"//Response description is OK\r",
							"pm.test(\"Command is correctly invoked\", function () {\r",
							"    pm.expect(response).to.include(pm.environment.get(\"okCommand\"));\r",
							"});\r",
							"\r",
							"//Test response gives the IDSESION\r",
							"pm.test(\"ID Session correctly obtained\", function () {\r",
							"    pm.expect(response).to.include(pm.environment.get(\"includeIdSession\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/xml; charset=utf-8",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sisnet.framework.webservices.jaxws\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <urn:execute>\r\n         <!--Optional:-->\r\n         <arg0>LOGIN</arg0>\r\n         <!--Optional:-->\r\n         <arg1>\r\n         <![CDATA[\r\n            <ROOT>\r\n               <COMANDO>\r\n                  <CODIGO>LOGIN</CODIGO>\r\n                  <VERSION>1</VERSION>\r\n                  <TIPODUSO>VOID</TIPODUSO>\r\n               </COMANDO>\r\n               <ENTRADA>\r\n                  <USUARIO>{{user}}</USUARIO>\r\n                  <CONTRASEÑA>{{pass}}</CONTRASEÑA>\r\n                  <CODIMEDI>{{codMediator}}</CODIMEDI>\r\n                  <PROVACCE>{{accessProv}}</PROVACCE>\r\n               </ENTRADA>\r\n            </ROOT>\r\n        ]]>\r\n         </arg1>\r\n      </urn:execute>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{resource}}/WSSISNet?wsdl",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{resource}}",
						"WSSISNet"
					],
					"query": [
						{
							"key": "wsdl",
							"value": null
						}
					]
				}
			},
			"response": [
				{
					"name": "LOGIN Command",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sisnet.framework.webservices.jaxws\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <urn:execute>\r\n         <!--Optional:-->\r\n         <arg0>LOGIN</arg0>\r\n         <!--Optional:-->\r\n         <arg1>\r\n         <![CDATA[\r\n            <ROOT>\r\n            <COMANDO>\r\n                <CODIGO>LOGIN</CODIGO>\r\n                <VERSION>1</VERSION>\r\n                <TIPODUSO>VOID</TIPODUSO>\r\n            </COMANDO>\r\n            <ENTRADA>\r\n                <USUARIO>rdferreira</USUARIO>\r\n                <PASSWORD>123456</PASSWORD>\r\n            </ENTRADA>\r\n        </ROOT>\r\n        ]]>\r\n         </arg1>\r\n      </urn:execute>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://esbarint01.esbar.dasnet:8080/SisnetINT/WSSISNet?wsdl",
							"protocol": "http",
							"host": [
								"esbarint01",
								"esbar",
								"dasnet"
							],
							"port": "8080",
							"path": [
								"SisnetINT",
								"WSSISNet"
							],
							"query": [
								{
									"key": "wsdl",
									"value": null
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "xml",
					"header": [
						{
							"key": "Cache-control",
							"value": "no-cache, must-revalidate, no-store"
						},
						{
							"key": "Expires",
							"value": "-1"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "X-UA-Compatible",
							"value": "IE=Edge"
						},
						{
							"key": "Content-Type",
							"value": "text/xml;charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 07 Jul 2020 12:20:15 GMT"
						}
					],
					"cookie": [],
					"body": "<?xml version='1.0' encoding='UTF-8'?>\n<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <SOAP-ENV:Header/>\n    <S:Body>\n        <ns2:executeResponse xmlns:ns2=\"urn:sisnet.framework.webservices.jaxws\">\n            <return>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n&lt;ROOT>\n&lt;RETORNO>\n&lt;CODIGO>0&lt;/CODIGO>\n&lt;DESCRIPCION>Comando invocado correctamente.&lt;/DESCRIPCION>\n&lt;EXCEPCION>&lt;/EXCEPCION>\n&lt;COMENTARIO>&lt;/COMENTARIO>\n&lt;AVISOS>\n&lt;/AVISOS>\n\n&lt;/RETORNO>\n&lt;RESPUESTA>\n&lt;IDSESION>WSSISnetesbarint01U212I195715ef08635d5145b994e3031b513178&lt;/IDSESION>\n\n&lt;/RESPUESTA>\n&lt;/ROOT></return>\n        </ns2:executeResponse>\n    </S:Body>\n</S:Envelope>"
				}
			]
		},
		{
			"name": "SN_CONSCLIE Command",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "df2df6a4-bb7e-4926-b216-5605ab7b2810",
						"exec": [
							"const xml2js = require('xml2js');\r",
							"const response = pm.response.text();\r",
							"const $ = cheerio.load(response);\r",
							"const xmlPayload = $('return').text();\r",
							"let name, lastName1, lastName2, clientID, birthDate, sex, civilStatus, countryCode, language, profCode, dataName, value;\r",
							"let returnCode, returnDescription, returnException, returnComment;\r",
							"\r",
							"//Parse response\r",
							"xml2js.parseString(xmlPayload, (_, res) => {\r",
							"    returnCode = JSON.stringify(res.ROOT.RETORNO[0].CODIGO[0]).replace(/\\\"/g, \"\");\r",
							"    returnDescription = JSON.stringify(res.ROOT.RETORNO[0].DESCRIPCION[0]).replace(/\\\"/g, \"\");\r",
							"    returnException = JSON.stringify(res.ROOT.RETORNO[0].EXCEPCION[0]).replace(/\\\"/g, \"\");\r",
							"    returnComment = JSON.stringify(res.ROOT.RETORNO[0].COMENTARIO[0]).replace(/\\\"/g, \"\");\r",
							"\r",
							"    if(returnCode === '0'){\r",
							"        name = JSON.stringify(res.ROOT.RESPUESTA[0].CLIENTE[0].NOMBRE[0]).replace(/\\\"/g, \"\");\r",
							"        lastName1 = JSON.stringify(res.ROOT.RESPUESTA[0].CLIENTE[0].APELLIDO1[0]).replace(/\\\"/g, \"\");\r",
							"        lastName2 = JSON.stringify(res.ROOT.RESPUESTA[0].CLIENTE[0].APELLIDO2[0]).replace(/\\\"/g, \"\");\r",
							"        birthDate = JSON.stringify(res.ROOT.RESPUESTA[0].CLIENTE[0].FEC_NAC[0]).replace(/\\\"/g, \"\");\r",
							"        clientID = JSON.stringify(res.ROOT.RESPUESTA[0].CLIENTE[0].IDENTIFICADOR[0]).replace(/\\\"/g, \"\");\r",
							"        sex = JSON.stringify(res.ROOT.RESPUESTA[0].CLIENTE[0].SEXO[0]).replace(/\\\"/g, \"\");\r",
							"        civilStatus = JSON.stringify(res.ROOT.RESPUESTA[0].CLIENTE[0].ESTADO_CIVIL[0]).replace(/\\\"/g, \"\");\r",
							"        countryCode = JSON.stringify(res.ROOT.RESPUESTA[0].CLIENTE[0].PAIS_COD[0]).replace(/\\\"/g, \"\");\r",
							"        language = JSON.stringify(res.ROOT.RESPUESTA[0].CLIENTE[0].IDIOMA[0]).replace(/\\\"/g, \"\");\r",
							"        profCode = JSON.stringify(res.ROOT.RESPUESTA[0].CLIENTE[0].PROF_COD[0]).replace(/\\\"/g, \"\");\r",
							"        dataName = JSON.stringify(res.ROOT.RESPUESTA[0].CLIENTE[0].DATOS_ADICIONALES[0].DATOS_ADICIONAL[0].NOMBDATO[0]).replace(/\\\"/g, \"\");\r",
							"        value = JSON.stringify(res.ROOT.RESPUESTA[0].CLIENTE[0].DATOS_ADICIONALES[0].DATOS_ADICIONAL[0].VALOR[0]).replace(/\\\"/g, \"\");\r",
							"    }\r",
							"\r",
							"});\r",
							"\r",
							"/************* FUNCTIONS*****************/\r",
							"\r",
							"    function returnFunction(){\r",
							"        console.log(returnComment+\" - \"+ returnDescription+\" - \"+returnException);\r",
							"    }\r",
							"\r",
							"/***************************************/\r",
							"\r",
							"//Response 200\r",
							"pm.test(\"Response is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Command is correctly invoked\", function () {\r",
							"    returnFunction();\r",
							"    pm.expect(response).to.include(pm.environment.get(\"okCommand\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"Client name is correct\", function () {\r",
							"    pm.expect(name).to.eql(pm.environment.get(\"clientName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Client First Last Name is correct\", function () {\r",
							"    pm.expect(lastName1).to.eql(pm.environment.get(\"clientLastName1\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Client Second Last Name is correct\", function () {\r",
							"    pm.expect(lastName2).to.eql(pm.environment.get(\"clientLastName2\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Client ID is correct\", function () {\r",
							"    pm.expect(clientID).to.eql(pm.environment.get(\"clientID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Client birth date is correct\", function () {\r",
							"    pm.expect(birthDate).to.eql(pm.environment.get(\"clientBirthDate\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Client sex is correct\", function () {\r",
							"    pm.expect(sex).to.eql(pm.environment.get(\"clientSex\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Client civil status is correct\", function () {\r",
							"    pm.expect(civilStatus).to.eql(pm.environment.get(\"clientCivilStatus\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Client country code is correct\", function () {\r",
							"    pm.expect(countryCode).to.eql(pm.environment.get(\"clientCountryCode\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Client language is correct\", function () {\r",
							"    pm.expect(language).to.eql(pm.environment.get(\"clientLanguage\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Client prof. code is correct\", function () {\r",
							"    pm.expect(profCode).to.eql(pm.environment.get(\"clientProfCode\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Client data name is correct\", function () {\r",
							"    pm.expect(dataName).to.eql(pm.environment.get(\"clientNameData\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Client value is correct\", function () {\r",
							"    pm.expect(value).to.eql(pm.environment.get(\"clientValue\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b4d2b7b3-b552-44de-b205-192f52e119eb",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "text/xml; charset=utf-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sisnet.framework.webservices.jaxws\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <urn:execute>\r\n         <!--Optional:-->\r\n         <arg0>SN_CONSCLIE</arg0>\r\n         <!--Optional:-->\r\n         <arg1>\r\n         <![CDATA[\r\n            <ROOT>\r\n               <COMANDO>\r\n                  <CODIGO>SN_CONSCLIE</CODIGO>\r\n                  <VERSION>1</VERSION>\r\n                  <TIPODUSO>VOID</TIPODUSO>\r\n               </COMANDO>\r\n               <SESION>\r\n                  <IDSESION>{{idSesion}}</IDSESION>\r\n               </SESION>\r\n               <ENTRADA>\r\n                  <TIPODOCU>{{docType}}</TIPODOCU>\r\n                  <NUMEDOCU>{{numDoc}}</NUMEDOCU>\r\n               </ENTRADA>\r\n            </ROOT>\r\n        ]]>\r\n         </arg1>\r\n      </urn:execute>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{resource}}/WSSISNet?wsdl",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{resource}}",
						"WSSISNet"
					],
					"query": [
						{
							"key": "wsdl",
							"value": null
						}
					]
				}
			},
			"response": [
				{
					"name": "CONSDATOSCLI Command",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sisnet.framework.webservices.jaxws\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <urn:execute>\r\n         <!--Optional:-->\r\n         <arg0>CONSDATOSCLI</arg0>\r\n         <!--Optional:-->\r\n         <arg1>\r\n         <![CDATA[\r\n            <ROOT>\r\n            <COMANDO>\r\n               <CODIGO>CONSDATOSCLI</CODIGO>\r\n               <TIPODUSO>VOID</TIPODUSO>\r\n               <VERSION>1</VERSION>\r\n            </COMANDO>\r\n            <SESION>\r\n               <IDSESION>WSSISnetesbarint01U212I182362168ddb41fc24b09524eb31714463</IDSESION>\r\n            </SESION>\r\n            <ENTRADA>\r\n               <ID_PERSONA/>\r\n               <NUMEDOCU>43397684L</NUMEDOCU>\r\n               <TIPODOCU>NIF</TIPODOCU>\r\n            </ENTRADA>\r\n            </ROOT>\r\n        ]]>\r\n         </arg1>\r\n      </urn:execute>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://esbarint01.esbar.dasnet:8080/SisnetINT/WSSISNet?wsdl",
							"protocol": "http",
							"host": [
								"esbarint01",
								"esbar",
								"dasnet"
							],
							"port": "8080",
							"path": [
								"SisnetINT",
								"WSSISNet"
							],
							"query": [
								{
									"key": "wsdl",
									"value": null
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "xml",
					"header": [
						{
							"key": "Cache-control",
							"value": "no-cache, must-revalidate, no-store"
						},
						{
							"key": "Expires",
							"value": "-1"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "X-UA-Compatible",
							"value": "IE=Edge"
						},
						{
							"key": "Content-Type",
							"value": "text/xml;charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 07 Jul 2020 12:18:29 GMT"
						}
					],
					"cookie": [],
					"body": "<?xml version='1.0' encoding='UTF-8'?>\n<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <SOAP-ENV:Header/>\n    <S:Body>\n        <ns2:executeResponse xmlns:ns2=\"urn:sisnet.framework.webservices.jaxws\">\n            <return>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n&lt;ROOT>\n&lt;RETORNO>\n&lt;CODIGO>0&lt;/CODIGO>\n&lt;DESCRIPCION>Comando invocado correctamente.&lt;/DESCRIPCION>\n&lt;EXCEPCION>&lt;/EXCEPCION>\n&lt;COMENTARIO>&lt;/COMENTARIO>\n&lt;AVISOS>\n&lt;/AVISOS>\n\n&lt;/RETORNO>\n&lt;RESPUESTA>\n&lt;CLIENTE>\n&lt;ID_DPERSONA>190753&lt;/ID_DPERSONA>\n&lt;NOMBRE>FIQ&amp;#209;ISSA &amp;#209;USE,CAET&lt;/NOMBRE>\n&lt;APELLIDO1>&lt;/APELLIDO1>\n&lt;APELLIDO2>&lt;/APELLIDO2>\n&lt;TIPODOC>NIF&lt;/TIPODOC>\n&lt;NACIMIENTO>&lt;/NACIMIENTO>\n&lt;NUMERODOC>43397684L&lt;/NUMERODOC>\n&lt;ID_DPEDOMI>246747&lt;/ID_DPEDOMI>\n&lt;PROVINCIA>08&lt;/PROVINCIA>\n&lt;CP>08041&lt;/CP>\n&lt;POBLACION>BARCELONA&lt;/POBLACION>\n&lt;DESPOBLACION>&lt;/DESPOBLACION>\n&lt;TIPOVIA>&lt;/TIPOVIA>\n&lt;DOMICILIO>C. XIPRER 4-6 2.3.&lt;/DOMICILIO>\n&lt;NUMERO>&lt;/NUMERO>\n&lt;PORTAL>&lt;/PORTAL>\n&lt;ESCALERA>&lt;/ESCALERA>\n&lt;PISO>&lt;/PISO>\n&lt;PUERTA>&lt;/PUERTA>\n&lt;DATOS_CONTACTO>\n&lt;CONTACTO>\n&lt;ID_DPEDCONT>194194&lt;/ID_DPEDCONT>\n&lt;TIPO>EMAIL&lt;/TIPO>\n&lt;DATO>silviatost@gmail.com&lt;/DATO>\n&lt;PRIORIDAD>0&lt;/PRIORIDAD>\n&lt;CANAL_NOTIFICACIONES>&lt;/CANAL_NOTIFICACIONES>\n&lt;/CONTACTO>\n&lt;CONTACTO>\n&lt;ID_DPEDCONT>194193&lt;/ID_DPEDCONT>\n&lt;TIPO>TELEFONO&lt;/TIPO>\n&lt;DATO>+34 934569897&lt;/DATO>\n&lt;PRIORIDAD>0&lt;/PRIORIDAD>\n&lt;CANAL_NOTIFICACIONES>&lt;/CANAL_NOTIFICACIONES>\n&lt;/CONTACTO>\n&lt;/DATOS_CONTACTO>\n&lt;/CLIENTE>\n\n&lt;/RESPUESTA>\n&lt;/ROOT></return>\n        </ns2:executeResponse>\n    </S:Body>\n</S:Envelope>"
				}
			]
		},
		{
			"name": "SN_INVOCCMD Command",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4327694d-9962-47cd-8209-bfe398dd9736",
						"exec": [
							"//Getting environment variables\r",
							"var clientName = pm.environment.get(\"clientName\");\r",
							"var okCommand = pm.environment.get(\"okCommand\");\r",
							"\r",
							"\r",
							"var jsonObject = xml2Json(responseBody);\r",
							"var jsonString = JSON.stringify(jsonObject);\r",
							"\r",
							"pm.test(\"Command is correctly invoked\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(okCommand);\r",
							"});\r",
							"\r",
							"pm.test(\"Client name is correct\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(clientName);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "text/xml; charset=utf-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sisnet.framework.webservices.jaxws\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <urn:execute>\r\n         <!--Optional:-->\r\n         <arg0>SN_INVOCCMD</arg0>\r\n         <!--Optional:-->\r\n         <arg1>\r\n         <![CDATA[\r\n            <ROOT>\r\n               <COMANDO>\r\n                  <CODIGO>LOGIN</CODIGO>\r\n                  <VERSION>1</VERSION>\r\n                  <TIPODUSO>VOID</TIPODUSO>\r\n               </COMANDO>\r\n               <ENTRADA>\r\n                  <IDSESION>{{idSesion}}</IDSESION>\r\n               </ENTRADA>\r\n            </ROOT>\r\n        ]]>\r\n         </arg1>\r\n      </urn:execute>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{resource}}/WSSISNet?wsdl",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{resource}}",
						"WSSISNet"
					],
					"query": [
						{
							"key": "wsdl",
							"value": null
						}
					]
				}
			},
			"response": [
				{
					"name": "CONSDATOSCLI Command",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sisnet.framework.webservices.jaxws\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <urn:execute>\r\n         <!--Optional:-->\r\n         <arg0>CONSDATOSCLI</arg0>\r\n         <!--Optional:-->\r\n         <arg1>\r\n         <![CDATA[\r\n            <ROOT>\r\n            <COMANDO>\r\n               <CODIGO>CONSDATOSCLI</CODIGO>\r\n               <TIPODUSO>VOID</TIPODUSO>\r\n               <VERSION>1</VERSION>\r\n            </COMANDO>\r\n            <SESION>\r\n               <IDSESION>WSSISnetesbarint01U212I182362168ddb41fc24b09524eb31714463</IDSESION>\r\n            </SESION>\r\n            <ENTRADA>\r\n               <ID_PERSONA/>\r\n               <NUMEDOCU>43397684L</NUMEDOCU>\r\n               <TIPODOCU>NIF</TIPODOCU>\r\n            </ENTRADA>\r\n            </ROOT>\r\n        ]]>\r\n         </arg1>\r\n      </urn:execute>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://esbarint01.esbar.dasnet:8080/SisnetINT/WSSISNet?wsdl",
							"protocol": "http",
							"host": [
								"esbarint01",
								"esbar",
								"dasnet"
							],
							"port": "8080",
							"path": [
								"SisnetINT",
								"WSSISNet"
							],
							"query": [
								{
									"key": "wsdl",
									"value": null
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "xml",
					"header": [
						{
							"key": "Cache-control",
							"value": "no-cache, must-revalidate, no-store"
						},
						{
							"key": "Expires",
							"value": "-1"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "X-UA-Compatible",
							"value": "IE=Edge"
						},
						{
							"key": "Content-Type",
							"value": "text/xml;charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 07 Jul 2020 12:18:29 GMT"
						}
					],
					"cookie": [],
					"body": "<?xml version='1.0' encoding='UTF-8'?>\n<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <SOAP-ENV:Header/>\n    <S:Body>\n        <ns2:executeResponse xmlns:ns2=\"urn:sisnet.framework.webservices.jaxws\">\n            <return>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n&lt;ROOT>\n&lt;RETORNO>\n&lt;CODIGO>0&lt;/CODIGO>\n&lt;DESCRIPCION>Comando invocado correctamente.&lt;/DESCRIPCION>\n&lt;EXCEPCION>&lt;/EXCEPCION>\n&lt;COMENTARIO>&lt;/COMENTARIO>\n&lt;AVISOS>\n&lt;/AVISOS>\n\n&lt;/RETORNO>\n&lt;RESPUESTA>\n&lt;CLIENTE>\n&lt;ID_DPERSONA>190753&lt;/ID_DPERSONA>\n&lt;NOMBRE>FIQ&amp;#209;ISSA &amp;#209;USE,CAET&lt;/NOMBRE>\n&lt;APELLIDO1>&lt;/APELLIDO1>\n&lt;APELLIDO2>&lt;/APELLIDO2>\n&lt;TIPODOC>NIF&lt;/TIPODOC>\n&lt;NACIMIENTO>&lt;/NACIMIENTO>\n&lt;NUMERODOC>43397684L&lt;/NUMERODOC>\n&lt;ID_DPEDOMI>246747&lt;/ID_DPEDOMI>\n&lt;PROVINCIA>08&lt;/PROVINCIA>\n&lt;CP>08041&lt;/CP>\n&lt;POBLACION>BARCELONA&lt;/POBLACION>\n&lt;DESPOBLACION>&lt;/DESPOBLACION>\n&lt;TIPOVIA>&lt;/TIPOVIA>\n&lt;DOMICILIO>C. XIPRER 4-6 2.3.&lt;/DOMICILIO>\n&lt;NUMERO>&lt;/NUMERO>\n&lt;PORTAL>&lt;/PORTAL>\n&lt;ESCALERA>&lt;/ESCALERA>\n&lt;PISO>&lt;/PISO>\n&lt;PUERTA>&lt;/PUERTA>\n&lt;DATOS_CONTACTO>\n&lt;CONTACTO>\n&lt;ID_DPEDCONT>194194&lt;/ID_DPEDCONT>\n&lt;TIPO>EMAIL&lt;/TIPO>\n&lt;DATO>silviatost@gmail.com&lt;/DATO>\n&lt;PRIORIDAD>0&lt;/PRIORIDAD>\n&lt;CANAL_NOTIFICACIONES>&lt;/CANAL_NOTIFICACIONES>\n&lt;/CONTACTO>\n&lt;CONTACTO>\n&lt;ID_DPEDCONT>194193&lt;/ID_DPEDCONT>\n&lt;TIPO>TELEFONO&lt;/TIPO>\n&lt;DATO>+34 934569897&lt;/DATO>\n&lt;PRIORIDAD>0&lt;/PRIORIDAD>\n&lt;CANAL_NOTIFICACIONES>&lt;/CANAL_NOTIFICACIONES>\n&lt;/CONTACTO>\n&lt;/DATOS_CONTACTO>\n&lt;/CLIENTE>\n\n&lt;/RESPUESTA>\n&lt;/ROOT></return>\n        </ns2:executeResponse>\n    </S:Body>\n</S:Envelope>"
				}
			]
		},
		{
			"name": "SINIESTRO Command",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6e6900d0-15e2-41a6-93f7-12a5f30f44a4",
						"exec": [
							"const xml2js = require('xml2js');\r",
							"const response = pm.response.text();\r",
							"const $ = cheerio.load(response);\r",
							"const xmlPayload = $('return').text();\r",
							"let sinisterNumber, ocuDate, ocuHour, ocuPlace, ocuProv, ocuCountry, typeSini, declDate, closingDate, codMediator, sinisterOffice, tramitator, reclamationPayment, payment, typeFigure, figureName, figurePhone, fax, reference, identificator, ampliation;\r",
							"let returnCode, returnDescription, returnException, returnComment;\r",
							"\r",
							"//Parse response\r",
							"xml2js.parseString(xmlPayload, (_, res) => {\r",
							"    returnCode = JSON.stringify(res.ROOT.RETORNO[0].CODIGO[0]).replace(/\\\"/g, \"\");\r",
							"    returnDescription = JSON.stringify(res.ROOT.RETORNO[0].DESCRIPCION[0]).replace(/\\\"/g, \"\");\r",
							"    returnException = JSON.stringify(res.ROOT.RETORNO[0].EXCEPCION[0]).replace(/\\\"/g, \"\");\r",
							"    returnComment = JSON.stringify(res.ROOT.RETORNO[0].COMENTARIO[0]).replace(/\\\"/g, \"\");\r",
							"\r",
							"    if(returnCode === '0'){\r",
							"        sinisterNumber = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].NUMESINI[0]).replace(/\\\"/g, \"\");\r",
							"        ocuDate = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].FECHOCU[0]).replace(/\\\"/g, \"\");\r",
							"        ocuHour = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].HORAOCU[0]).replace(/\\\"/g, \"\");\r",
							"        ocuPlace = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].LUGAROCU[0]).replace(/\\\"/g, \"\");\r",
							"        ocuProv = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].PROVIOCU[0]).replace(/\\\"/g, \"\");\r",
							"        ocuCountry = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].PAISDOCU[0]).replace(/\\\"/g, \"\");\r",
							"        typeSini = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].TIPOSINI[0]).replace(/\\\"/g, \"\");\r",
							"        declDate = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].FECHDECL[0]).replace(/\\\"/g, \"\");\r",
							"        closingDate = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].COCIERRE[0]).replace(/\\\"/g, \"\");\r",
							"        codMediator = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].CODIMEDI[0]).replace(/\\\"/g, \"\");\r",
							"        sinisterOffice = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].OFICSINI[0]).replace(/\\\"/g, \"\");\r",
							"        tramitator = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].TRAMITADOR[0]).replace(/\\\"/g, \"\");\r",
							"        reclamationPayment = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].IMPORECL[0]).replace(/\\\"/g, \"\");\r",
							"        payment = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].IMPOPAGA[0]).replace(/\\\"/g, \"\");\r",
							"        typeFigure = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].FIGURAS[0].FIGURA[0].TIPOFIGU[0]).replace(/\\\"/g, \"\");\r",
							"        figureName = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].FIGURAS[0].FIGURA[0].NOMBFIGU[0]).replace(/\\\"/g, \"\");\r",
							"        figurePhone = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].FIGURAS[0].FIGURA[0].TELEFONO[0]).replace(/\\\"/g, \"\");\r",
							"        fax = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].FIGURAS[0].FIGURA[0].FAX[0]).replace(/\\\"/g, \"\");\r",
							"        reference = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].FIGURAS[0].FIGURA[0].REFERENCIA[0]).replace(/\\\"/g, \"\");\r",
							"        identificator = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].FIGURAS[0].FIGURA[0].IDENTIFICADOR[0]).replace(/\\\"/g, \"\");\r",
							"        ampliation = JSON.stringify(res.ROOT.RESPUESTA[0].SINIESTRO[0].FIGURAS[0].FIGURA[0].AMPLIACION[0]).replace(/\\\"/g, \"\");\r",
							"    }\r",
							"});\r",
							"\r",
							"/************* FUNCTIONS*****************/\r",
							"\r",
							"    function returnFunction(){\r",
							"        console.log(returnComment+\" - \"+ returnDescription+\" - \"+returnException);\r",
							"    }\r",
							"\r",
							"/***************************************/\r",
							"\r",
							"//Response 200\r",
							"pm.test(\"Response is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Command is correctly invoked\", function () {\r",
							"    returnFunction();\r",
							"    pm.expect(response).to.include(pm.environment.get(\"okCommand\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister number is correct\", function () {\r",
							"    pm.expect(sinisterNumber).to.eql(pm.environment.get(\"numSini\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister ocurrence hour is correct\", function () {\r",
							"    pm.expect(ocuHour).to.eql(pm.environment.get(\"ocurrenceHour\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister ocurrence date is correct\", function () {\r",
							"    pm.expect(ocuDate).to.eql(pm.environment.get(\"ocurrenceDate\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister ocurrence country is correct\", function () {\r",
							"    pm.expect(ocuCountry).to.eql(pm.environment.get(\"ocurrenceCountry\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister ocurrence place is correct\", function () {\r",
							"    pm.expect(ocuPlace).to.eql(pm.environment.get(\"ocurrencePlace\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister ocurrence province is correct\", function () {\r",
							"    pm.expect(ocuProv).to.eql(pm.environment.get(\"ocurrenceProvince\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister type is correct\", function () {\r",
							"    pm.expect(typeSini).to.eql(pm.environment.get(\"typeSini\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Declaration date is correct\", function () {\r",
							"    pm.expect(declDate).to.eql(pm.environment.get(\"declarationDate\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister closing date is correct\", function () {\r",
							"    pm.expect(closingDate).to.eql(pm.environment.get(\"closingDate\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Mediator code is correct\", function () {\r",
							"    pm.expect(codMediator).to.eql(pm.environment.get(\"codMediator\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister office is correct\", function () {\r",
							"    pm.expect(sinisterOffice).to.eql(pm.environment.get(\"sinisterOffice\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister tramitator is correct\", function () {\r",
							"    pm.expect(tramitator).to.eql(pm.environment.get(\"tramitator\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister payment is correct\", function () {\r",
							"    pm.expect(payment).to.eql(pm.environment.get(\"toPay\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister recl. payment is correct\", function () {\r",
							"    pm.expect(reclamationPayment).to.eql(pm.environment.get(\"reclamationPayment\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister figure type is correct\", function () {\r",
							"    pm.expect(typeFigure).to.eql(pm.environment.get(\"typeFigure\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister figure name is correct\", function () {\r",
							"    pm.expect(figureName).to.eql(pm.environment.get(\"figureName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister figure phone is correct\", function () {\r",
							"    pm.expect(figurePhone).to.eql(pm.environment.get(\"figurePhone\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister figure fax is correct\", function () {\r",
							"    pm.expect(fax).to.eql(pm.environment.get(\"fax\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister figure reference is correct\", function () {\r",
							"    pm.expect(reference).to.eql(pm.environment.get(\"reference\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister figure ID is correct\", function () {\r",
							"    pm.expect(identificator).to.eql(pm.environment.get(\"identificator\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Sinister figure ampliation is correct\", function () {\r",
							"    pm.expect(ampliation).to.eql(pm.environment.get(\"ampliation\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "text/xml; charset=utf-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sisnet.framework.webservices.jaxws\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <urn:execute>\r\n         <!--Optional:-->\r\n         <arg0>SINIESTRO</arg0>\r\n         <!--Optional:-->\r\n         <arg1>\r\n         <![CDATA[\r\n            <ROOT>\r\n            <COMANDO>\r\n               <CODIGO>SINIESTRO</CODIGO>\r\n               <VERSION>1</VERSION>\r\n               <TIPODUSO>VOID</TIPODUSO>\r\n            </COMANDO>\r\n            <SESION>\r\n               <IDSESION>{{idSesion}}</IDSESION>\r\n            </SESION>\r\n            <ENTRADA>\r\n               <NUMESINI>{{sinister}}</NUMESINI>\r\n            </ENTRADA>\r\n            </ROOT>\r\n        ]]>\r\n         </arg1>\r\n      </urn:execute>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{resource}}/WSSISNet?wsdl",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{resource}}",
						"WSSISNet"
					],
					"query": [
						{
							"key": "wsdl",
							"value": null
						}
					]
				}
			},
			"response": [
				{
					"name": "CONSDATOSCLI Command",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sisnet.framework.webservices.jaxws\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <urn:execute>\r\n         <!--Optional:-->\r\n         <arg0>CONSDATOSCLI</arg0>\r\n         <!--Optional:-->\r\n         <arg1>\r\n         <![CDATA[\r\n            <ROOT>\r\n            <COMANDO>\r\n               <CODIGO>CONSDATOSCLI</CODIGO>\r\n               <TIPODUSO>VOID</TIPODUSO>\r\n               <VERSION>1</VERSION>\r\n            </COMANDO>\r\n            <SESION>\r\n               <IDSESION>WSSISnetesbarint01U212I182362168ddb41fc24b09524eb31714463</IDSESION>\r\n            </SESION>\r\n            <ENTRADA>\r\n               <ID_PERSONA/>\r\n               <NUMEDOCU>43397684L</NUMEDOCU>\r\n               <TIPODOCU>NIF</TIPODOCU>\r\n            </ENTRADA>\r\n            </ROOT>\r\n        ]]>\r\n         </arg1>\r\n      </urn:execute>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://esbarint01.esbar.dasnet:8080/SisnetINT/WSSISNet?wsdl",
							"protocol": "http",
							"host": [
								"esbarint01",
								"esbar",
								"dasnet"
							],
							"port": "8080",
							"path": [
								"SisnetINT",
								"WSSISNet"
							],
							"query": [
								{
									"key": "wsdl",
									"value": null
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "xml",
					"header": [
						{
							"key": "Cache-control",
							"value": "no-cache, must-revalidate, no-store"
						},
						{
							"key": "Expires",
							"value": "-1"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "X-UA-Compatible",
							"value": "IE=Edge"
						},
						{
							"key": "Content-Type",
							"value": "text/xml;charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 07 Jul 2020 12:18:29 GMT"
						}
					],
					"cookie": [],
					"body": "<?xml version='1.0' encoding='UTF-8'?>\n<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <SOAP-ENV:Header/>\n    <S:Body>\n        <ns2:executeResponse xmlns:ns2=\"urn:sisnet.framework.webservices.jaxws\">\n            <return>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n&lt;ROOT>\n&lt;RETORNO>\n&lt;CODIGO>0&lt;/CODIGO>\n&lt;DESCRIPCION>Comando invocado correctamente.&lt;/DESCRIPCION>\n&lt;EXCEPCION>&lt;/EXCEPCION>\n&lt;COMENTARIO>&lt;/COMENTARIO>\n&lt;AVISOS>\n&lt;/AVISOS>\n\n&lt;/RETORNO>\n&lt;RESPUESTA>\n&lt;CLIENTE>\n&lt;ID_DPERSONA>190753&lt;/ID_DPERSONA>\n&lt;NOMBRE>FIQ&amp;#209;ISSA &amp;#209;USE,CAET&lt;/NOMBRE>\n&lt;APELLIDO1>&lt;/APELLIDO1>\n&lt;APELLIDO2>&lt;/APELLIDO2>\n&lt;TIPODOC>NIF&lt;/TIPODOC>\n&lt;NACIMIENTO>&lt;/NACIMIENTO>\n&lt;NUMERODOC>43397684L&lt;/NUMERODOC>\n&lt;ID_DPEDOMI>246747&lt;/ID_DPEDOMI>\n&lt;PROVINCIA>08&lt;/PROVINCIA>\n&lt;CP>08041&lt;/CP>\n&lt;POBLACION>BARCELONA&lt;/POBLACION>\n&lt;DESPOBLACION>&lt;/DESPOBLACION>\n&lt;TIPOVIA>&lt;/TIPOVIA>\n&lt;DOMICILIO>C. XIPRER 4-6 2.3.&lt;/DOMICILIO>\n&lt;NUMERO>&lt;/NUMERO>\n&lt;PORTAL>&lt;/PORTAL>\n&lt;ESCALERA>&lt;/ESCALERA>\n&lt;PISO>&lt;/PISO>\n&lt;PUERTA>&lt;/PUERTA>\n&lt;DATOS_CONTACTO>\n&lt;CONTACTO>\n&lt;ID_DPEDCONT>194194&lt;/ID_DPEDCONT>\n&lt;TIPO>EMAIL&lt;/TIPO>\n&lt;DATO>silviatost@gmail.com&lt;/DATO>\n&lt;PRIORIDAD>0&lt;/PRIORIDAD>\n&lt;CANAL_NOTIFICACIONES>&lt;/CANAL_NOTIFICACIONES>\n&lt;/CONTACTO>\n&lt;CONTACTO>\n&lt;ID_DPEDCONT>194193&lt;/ID_DPEDCONT>\n&lt;TIPO>TELEFONO&lt;/TIPO>\n&lt;DATO>+34 934569897&lt;/DATO>\n&lt;PRIORIDAD>0&lt;/PRIORIDAD>\n&lt;CANAL_NOTIFICACIONES>&lt;/CANAL_NOTIFICACIONES>\n&lt;/CONTACTO>\n&lt;/DATOS_CONTACTO>\n&lt;/CLIENTE>\n\n&lt;/RESPUESTA>\n&lt;/ROOT></return>\n        </ns2:executeResponse>\n    </S:Body>\n</S:Envelope>"
				}
			]
		},
		{
			"name": "POLIZA Command",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "337f4fd2-7ba1-4d59-b101-fd5f3d1f3c78",
						"exec": [
							"//Response 200\r",
							"pm.test(\"Response is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"const xml2js = require('xml2js');\r",
							"const response = pm.response.text();\r",
							"const $ = cheerio.load(response);\r",
							"const xmlPayload = $('return').text();\r",
							"let numPoli, poliStatus, poliStart, poliEfect, poliDue, suplementDate, suplementType, paymentMethod, poliNet, poliTotal, poliTaxes, paymentType, takerName, takerAddress, takerCP, takerPoblation, takerDocuType, takerCCC, takerNumDocu, mediatorCode, mediatorName, product, productDescription, combiCode, combiDescription, riskNumber, riskType, riskDescription, riskID, covCode, covDescription, covCapital, covCapiDescription, covLimit, clauseCode, clauseDescription;\r",
							"let returnCode, returnDescription, returnException, returnComment;\r",
							"\r",
							"//Parse response\r",
							"xml2js.parseString(xmlPayload, (_, res) => {\r",
							"    returnCode = JSON.stringify(res.ROOT.RETORNO[0].CODIGO[0]).replace(/\\\"/g, \"\");\r",
							"    returnDescription = JSON.stringify(res.ROOT.RETORNO[0].DESCRIPCION[0]).replace(/\\\"/g, \"\");\r",
							"    returnException = JSON.stringify(res.ROOT.RETORNO[0].EXCEPCION[0]).replace(/\\\"/g, \"\");\r",
							"    returnComment = JSON.stringify(res.ROOT.RETORNO[0].COMENTARIO[0]).replace(/\\\"/g, \"\");\r",
							"\r",
							"    if(returnCode === '0'){\r",
							"        numPoli = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].NUMPOLIZ[0]).replace(/\\\"/g, \"\");\r",
							"        poliStatus = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].ESTADO[0]).replace(/\\\"/g, \"\");\r",
							"        poliStart = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].POLIALTA[0]).replace(/\\\"/g, \"\");\r",
							"        poliEfect = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].POLIEFEC[0]).replace(/\\\"/g, \"\");\r",
							"        poliDue = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].POLIVENC[0]).replace(/\\\"/g, \"\");\r",
							"        suplementDate = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].FECHSUPL[0]).replace(/\\\"/g, \"\");\r",
							"        suplementType = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].TIPOSUPL[0]).replace(/\\\"/g, \"\");\r",
							"        paymentMethod = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].MEDIOPAG[0]).replace(/\\\"/g, \"\");\r",
							"        poliNet = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].POLIPNET[0]).replace(/\\\"/g, \"\");\r",
							"        poliTotal = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].POLIPTOT[0]).replace(/\\\"/g, \"\");\r",
							"        poliTaxes = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].IMPUESTOS[0]).replace(/\\\"/g, \"\");\r",
							"        paymentType = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].COBROPER[0]).replace(/\\\"/g, \"\");\r",
							"        takerName = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].TOMADOR[0].NOMBTOMA[0]).replace(/\\\"/g, \"\");\r",
							"        takerAddress = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].TOMADOR[0].DIRECCION[0]).replace(/\\\"/g, \"\");\r",
							"        takerCP = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].TOMADOR[0].POSTAL[0]).replace(/\\\"/g, \"\");\r",
							"        takerPoblation = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].TOMADOR[0].POBLACION[0]).replace(/\\\"/g, \"\");\r",
							"        takerCCC = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].TOMADOR[0].CCC[0]).replace(/\\\"/g, \"\");\r",
							"        takerDocuType = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].TOMADOR[0].TIPODOCU[0]).replace(/\\\"/g, \"\");\r",
							"        takerNumDocu = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].TOMADOR[0].NUMEDOCU[0]).replace(/\\\"/g, \"\");\r",
							"        mediatorName = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].NOMBMEDI[0]).replace(/\\\"/g, \"\");\r",
							"        mediatorCode = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].CODIMEDI[0]).replace(/\\\"/g, \"\");\r",
							"        product = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].PRODUCTO[0]).replace(/\\\"/g, \"\");\r",
							"        productDescription = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].PRODUDES[0]).replace(/\\\"/g, \"\");\r",
							"        combiDescription = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].COMBIDES[0]).replace(/\\\"/g, \"\");\r",
							"        combiCode = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].COMBICOD[0]).replace(/\\\"/g, \"\");\r",
							"        riskNumber = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].RIESGOS[0].RIESGO[0].NUMERIES[0]).replace(/\\\"/g, \"\");\r",
							"        riskType = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].RIESGOS[0].RIESGO[0].TIPORIES[0]).replace(/\\\"/g, \"\");\r",
							"        riskDescription = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].RIESGOS[0].RIESGO[0].DESCRIES[0]).replace(/\\\"/g, \"\");\r",
							"        riskID = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].RIESGOS[0].RIESGO[0].IDRIES[0]).replace(/\\\"/g, \"\");\r",
							"        covCode = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].COBERTURAS[0].COBERTURA[0].CODIGO[0]).replace(/\\\"/g, \"\");\r",
							"        covDescription = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].COBERTURAS[0].COBERTURA[0].DESCRIPCION[0]).replace(/\\\"/g, \"\");\r",
							"        covCapital = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].COBERTURAS[0].COBERTURA[0].CAPITAL[0]).replace(/\\\"/g, \"\");\r",
							"        covCapiDescription = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].COBERTURAS[0].COBERTURA[0].DESCCAPI[0]).replace(/\\\"/g, \"\");\r",
							"        covLimit = JSON.stringify(res.ROOT.RESPUESTA[0].POLIZA[0].COBERTURAS[0].COBERTURA[0].LIMITE[0]).replace(/\\\"/g, \"\");\r",
							"        clauseCode = JSON.stringify(res.ROOT.RESPUESTA[0].CLAUSULAS[0].CLAUSULA[0].CODIGO[0]).replace(/\\\"/g, \"\");\r",
							"        clauseDescription = JSON.stringify(res.ROOT.RESPUESTA[0].CLAUSULAS[0].CLAUSULA[0].DESCRIPCION[0]).replace(/\\\"/g, \"\");\r",
							"    }\r",
							"\r",
							"});\r",
							"\r",
							"/************* FUNCTIONS*****************/\r",
							"\r",
							"    function returnFunction(){\r",
							"        console.log(returnComment+\" - \"+ returnDescription+\" - \"+returnException);\r",
							"    }\r",
							"\r",
							"/***************************************/\r",
							"\r",
							"pm.test(\"Command is correctly invoked\", function () {\r",
							"    returnFunction();\r",
							"    pm.expect(response).to.include(pm.environment.get(\"okCommand\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Policy number is correct\", function () {\r",
							"    pm.expect(numPoli).to.eql(pm.environment.get(\"policyNumber\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Policy start is correct\", function () {\r",
							"    pm.expect(poliStart).to.eql(pm.environment.get(\"fromPolicy\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Policy end is correct\", function () {\r",
							"    pm.expect(poliDue).to.eql(pm.environment.get(\"toPolicy\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Policy status is correct\", function () {\r",
							"    pm.expect(poliStatus).to.eql(pm.environment.get(\"policyStatus\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Policy efectivity is correct\", function () {\r",
							"    pm.expect(poliEfect).to.eql(pm.environment.get(\"policyEfec\"));\r",
							"});\r",
							"\r",
							"pm.test(\"CCC is correct\", function () {\r",
							"    pm.expect(takerCCC).to.eql(pm.environment.get(\"cccPolicy\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Taker poblation is correct\", function () {\r",
							"    pm.expect(takerPoblation).to.eql(pm.environment.get(\"takerPoblation\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Taker document type is correct\", function () {\r",
							"    pm.expect(takerDocuType).to.eql(pm.environment.get(\"takerDocumentType\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Taker document number is correct\", function () {\r",
							"    pm.expect(takerNumDocu).to.eql(pm.environment.get(\"takerDocumentNumber\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Mediator code is correct\", function () {\r",
							"    pm.expect(mediatorCode).to.eql(pm.environment.get(\"codMediator\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Suplement date is correct\", function () {\r",
							"    pm.expect(suplementDate).to.eql(pm.environment.get(\"suplementDate\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Suplement type is correct\", function () {\r",
							"    pm.expect(suplementType).to.eql(pm.environment.get(\"suplementType\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Payment method is correct\", function () {\r",
							"    pm.expect(paymentMethod).to.eql(pm.environment.get(\"policyPaymentMethod\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Net payment is correct\", function () {\r",
							"    pm.expect(poliNet).to.eql(pm.environment.get(\"netPolicyPayment\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Total payment is correct\", function () {\r",
							"    pm.expect(poliTotal).to.eql(pm.environment.get(\"totalPolicyPayment\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Taxes are correct\", function () {\r",
							"    pm.expect(poliTaxes).to.eql(pm.environment.get(\"policyTaxes\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Charge is correct\", function () {\r",
							"    pm.expect(paymentType).to.eql(pm.environment.get(\"policyCharge\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Taker name is correct\", function () {\r",
							"    pm.expect(takerName).to.eql(pm.environment.get(\"policyTakerName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Address is correct\", function () {\r",
							"    pm.expect(takerAddress).to.eql(pm.environment.get(\"policyAddress\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Postal code is correct\", function () {\r",
							"    pm.expect(takerCP).to.eql(pm.environment.get(\"policyPostalCode\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Mediator name is correct\", function () {\r",
							"    pm.expect(mediatorName).to.eql(pm.environment.get(\"mediatorName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Product code is correct\", function () {\r",
							"    pm.expect(product).to.eql(pm.environment.get(\"policyProductCode\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Product description is correct\", function () {\r",
							"    pm.expect(productDescription).to.eql(pm.environment.get(\"policyProductDescription\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Combination code is correct\", function () {\r",
							"    pm.expect(combiCode).to.eql(pm.environment.get(\"combiCode\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Comb. description is correct\", function () {\r",
							"    pm.expect(combiDescription).to.eql(pm.environment.get(\"combiDescription\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Risk number is correct\", function () {\r",
							"    pm.expect(riskNumber).to.eql(pm.environment.get(\"riskNumber1\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Risk type is correct\", function () {\r",
							"    pm.expect(riskType).to.eql(pm.environment.get(\"riskType\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Risk ID is correct\", function () {\r",
							"    pm.expect(riskID).to.eql(pm.environment.get(\"riskID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Risk description is correct\", function () {\r",
							"    pm.expect(riskDescription).to.eql(pm.environment.get(\"riskDescription\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Coverage code is correct\", function () {\r",
							"    pm.expect(covCode).to.eql(pm.environment.get(\"covCode\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Coverage description is correct\", function () {\r",
							"    pm.expect(covDescription).to.eql(pm.environment.get(\"covDescription\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Capital is correct\", function () {\r",
							"    pm.expect(covCapital).to.eql(pm.environment.get(\"capital\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Capital description is correct\", function () {\r",
							"    pm.expect(covCapiDescription).to.eql(pm.environment.get(\"capitalDescription\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Limit is correct\", function () {\r",
							"    pm.expect(covLimit).to.eql(pm.environment.get(\"coverageLimit\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Clause code is correct\", function () {\r",
							"    pm.expect(clauseCode).to.eql(pm.environment.get(\"clauseCode\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Clause description is correct\", function () {\r",
							"    pm.expect(clauseDescription).to.eql(pm.environment.get(\"clauseDescription\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5428b141-7aa8-4d80-ba62-60d48479b437",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "text/xml; charset=utf-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sisnet.framework.webservices.jaxws\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <urn:execute>\r\n         <!--Optional:-->\r\n         <arg0>POLIZA</arg0>\r\n         <!--Optional:-->\r\n         <arg1>\r\n         <![CDATA[\r\n            <ROOT>\r\n            <COMANDO>\r\n               <CODIGO>POLIZA</CODIGO>\r\n               <TIPODUSO>VOID</TIPODUSO>\r\n               <VERSION>1</VERSION>\r\n            </COMANDO>\r\n            <SESION>\r\n               <IDSESION>{{idSesion}}</IDSESION>\r\n            </SESION>\r\n               <ENTRADA>\r\n                  <NUMPOLIZ>{{numPolicy}}</NUMPOLIZ>\r\n               </ENTRADA>\r\n            </ROOT>\r\n        ]]>\r\n         </arg1>\r\n      </urn:execute>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{resource}}/WSSISNet?wsdl",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{resource}}",
						"WSSISNet"
					],
					"query": [
						{
							"key": "wsdl",
							"value": null
						}
					]
				}
			},
			"response": [
				{
					"name": "CONSDATOSCLI Command",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sisnet.framework.webservices.jaxws\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <urn:execute>\r\n         <!--Optional:-->\r\n         <arg0>CONSDATOSCLI</arg0>\r\n         <!--Optional:-->\r\n         <arg1>\r\n         <![CDATA[\r\n            <ROOT>\r\n            <COMANDO>\r\n               <CODIGO>CONSDATOSCLI</CODIGO>\r\n               <TIPODUSO>VOID</TIPODUSO>\r\n               <VERSION>1</VERSION>\r\n            </COMANDO>\r\n            <SESION>\r\n               <IDSESION>WSSISnetesbarint01U212I182362168ddb41fc24b09524eb31714463</IDSESION>\r\n            </SESION>\r\n            <ENTRADA>\r\n               <ID_PERSONA/>\r\n               <NUMEDOCU>43397684L</NUMEDOCU>\r\n               <TIPODOCU>NIF</TIPODOCU>\r\n            </ENTRADA>\r\n            </ROOT>\r\n        ]]>\r\n         </arg1>\r\n      </urn:execute>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://esbarint01.esbar.dasnet:8080/SisnetINT/WSSISNet?wsdl",
							"protocol": "http",
							"host": [
								"esbarint01",
								"esbar",
								"dasnet"
							],
							"port": "8080",
							"path": [
								"SisnetINT",
								"WSSISNet"
							],
							"query": [
								{
									"key": "wsdl",
									"value": null
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "xml",
					"header": [
						{
							"key": "Cache-control",
							"value": "no-cache, must-revalidate, no-store"
						},
						{
							"key": "Expires",
							"value": "-1"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "X-UA-Compatible",
							"value": "IE=Edge"
						},
						{
							"key": "Content-Type",
							"value": "text/xml;charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 07 Jul 2020 12:18:29 GMT"
						}
					],
					"cookie": [],
					"body": "<?xml version='1.0' encoding='UTF-8'?>\n<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <SOAP-ENV:Header/>\n    <S:Body>\n        <ns2:executeResponse xmlns:ns2=\"urn:sisnet.framework.webservices.jaxws\">\n            <return>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n&lt;ROOT>\n&lt;RETORNO>\n&lt;CODIGO>0&lt;/CODIGO>\n&lt;DESCRIPCION>Comando invocado correctamente.&lt;/DESCRIPCION>\n&lt;EXCEPCION>&lt;/EXCEPCION>\n&lt;COMENTARIO>&lt;/COMENTARIO>\n&lt;AVISOS>\n&lt;/AVISOS>\n\n&lt;/RETORNO>\n&lt;RESPUESTA>\n&lt;CLIENTE>\n&lt;ID_DPERSONA>190753&lt;/ID_DPERSONA>\n&lt;NOMBRE>FIQ&amp;#209;ISSA &amp;#209;USE,CAET&lt;/NOMBRE>\n&lt;APELLIDO1>&lt;/APELLIDO1>\n&lt;APELLIDO2>&lt;/APELLIDO2>\n&lt;TIPODOC>NIF&lt;/TIPODOC>\n&lt;NACIMIENTO>&lt;/NACIMIENTO>\n&lt;NUMERODOC>43397684L&lt;/NUMERODOC>\n&lt;ID_DPEDOMI>246747&lt;/ID_DPEDOMI>\n&lt;PROVINCIA>08&lt;/PROVINCIA>\n&lt;CP>08041&lt;/CP>\n&lt;POBLACION>BARCELONA&lt;/POBLACION>\n&lt;DESPOBLACION>&lt;/DESPOBLACION>\n&lt;TIPOVIA>&lt;/TIPOVIA>\n&lt;DOMICILIO>C. XIPRER 4-6 2.3.&lt;/DOMICILIO>\n&lt;NUMERO>&lt;/NUMERO>\n&lt;PORTAL>&lt;/PORTAL>\n&lt;ESCALERA>&lt;/ESCALERA>\n&lt;PISO>&lt;/PISO>\n&lt;PUERTA>&lt;/PUERTA>\n&lt;DATOS_CONTACTO>\n&lt;CONTACTO>\n&lt;ID_DPEDCONT>194194&lt;/ID_DPEDCONT>\n&lt;TIPO>EMAIL&lt;/TIPO>\n&lt;DATO>silviatost@gmail.com&lt;/DATO>\n&lt;PRIORIDAD>0&lt;/PRIORIDAD>\n&lt;CANAL_NOTIFICACIONES>&lt;/CANAL_NOTIFICACIONES>\n&lt;/CONTACTO>\n&lt;CONTACTO>\n&lt;ID_DPEDCONT>194193&lt;/ID_DPEDCONT>\n&lt;TIPO>TELEFONO&lt;/TIPO>\n&lt;DATO>+34 934569897&lt;/DATO>\n&lt;PRIORIDAD>0&lt;/PRIORIDAD>\n&lt;CANAL_NOTIFICACIONES>&lt;/CANAL_NOTIFICACIONES>\n&lt;/CONTACTO>\n&lt;/DATOS_CONTACTO>\n&lt;/CLIENTE>\n\n&lt;/RESPUESTA>\n&lt;/ROOT></return>\n        </ns2:executeResponse>\n    </S:Body>\n</S:Envelope>"
				}
			]
		},
		{
			"name": "RECIBO Command",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cf3a9b0b-eec3-41be-8eff-866f2a8de21f",
						"exec": [
							"//Response 200\r",
							"pm.test(\"Response is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"const xml2js = require('xml2js');\r",
							"const response = pm.response.text();\r",
							"const $ = cheerio.load(response);\r",
							"const xmlPayload = $('return').text();\r",
							"let numReceipt, typeReceipt, receiptEfect, receiptDue, receiptEmision, netReceipt, receiptTaxes, totalReceipt, receiptTaxesCommission, receiptIRPF, liquidComissionReceipt, liquidCIAReceipt, swCartera, canalReceipt, receiptPaymentMethod, receiptStatus, receiptPolicy, receiptPolicyTaker, receiptPolicyProduct, receiptNetPolicy, receiptPolicyCommission, receiptPolicyRiskType, receiptPolicyRiskDesc;\r",
							"let returnCode, returnDescription, returnException, returnComment;\r",
							"\r",
							"//Parse response\r",
							"xml2js.parseString(xmlPayload, (_, res) => {\r",
							"    returnCode = JSON.stringify(res.ROOT.RETORNO[0].CODIGO[0]).replace(/\\\"/g, \"\");\r",
							"    returnDescription = JSON.stringify(res.ROOT.RETORNO[0].DESCRIPCION[0]).replace(/\\\"/g, \"\");\r",
							"    returnException = JSON.stringify(res.ROOT.RETORNO[0].EXCEPCION[0]).replace(/\\\"/g, \"\");\r",
							"    returnComment = JSON.stringify(res.ROOT.RETORNO[0].COMENTARIO[0]).replace(/\\\"/g, \"\");\r",
							"\r",
							"    if(returnCode === '0'){\r",
							"        numReceipt = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].NUMERECI[0]).replace(/\\\"/g, \"\");\r",
							"        typeReceipt = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].TIPORECI[0]).replace(/\\\"/g, \"\");\r",
							"        receiptEfect = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].RECIEFEC[0]).replace(/\\\"/g, \"\");\r",
							"        receiptDue = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].RECIVENC[0]).replace(/\\\"/g, \"\");\r",
							"        receiptEmision = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].RECIEMIS[0]).replace(/\\\"/g, \"\");\r",
							"        netReceipt = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].RECIPNET[0]).replace(/\\\"/g, \"\");\r",
							"        receiptTaxes = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].IMPUESTOS[0]).replace(/\\\"/g, \"\");\r",
							"        totalReceipt = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].RECIPTOT[0]).replace(/\\\"/g, \"\");\r",
							"        receiptTaxesCommission = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].IMPCOMIS[0]).replace(/\\\"/g, \"\");\r",
							"        receiptIRPF = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].IMPOIRPF[0]).replace(/\\\"/g, \"\");\r",
							"        liquidComissionReceipt = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].LIQCOMIS[0]).replace(/\\\"/g, \"\");\r",
							"        liquidCIAReceipt = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].LIQCIA[0]).replace(/\\\"/g, \"\");\r",
							"        swCartera = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].SWCARTERA[0]).replace(/\\\"/g, \"\");\r",
							"        canalReceipt = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].CANALORI[0]).replace(/\\\"/g, \"\");\r",
							"        receiptPaymentMethod = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].MEDIOPAG[0]).replace(/\\\"/g, \"\");\r",
							"        receiptStatus = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].ESTADO[0]).replace(/\\\"/g, \"\");\r",
							"        receiptPolicy = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].POLIZA[0].NUMPOLIZ[0]).replace(/\\\"/g, \"\");\r",
							"        receiptPolicyTaker = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].POLIZA[0].TOMADOR[0]).replace(/\\\"/g, \"\");\r",
							"        receiptPolicyProduct = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].POLIZA[0].PRODUCTO[0]).replace(/\\\"/g, \"\");\r",
							"        receiptNetPolicy = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].POLIZA[0].IMPOPNET[0]).replace(/\\\"/g, \"\");\r",
							"        receiptPolicyCommission = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].POLIZA[0].IMPCOMIS[0]).replace(/\\\"/g, \"\");\r",
							"        receiptPolicyRiskType = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].POLIZA[0].RIESGOS[0].RIESGO[0].TIPORIES[0]).replace(/\\\"/g, \"\");\r",
							"        receiptPolicyRiskDesc = JSON.stringify(res.ROOT.RESPUESTA[0].RECIBO[0].POLIZA[0].RIESGOS[0].RIESGO[0].DESCRIES[0]).replace(/\\\"/g, \"\");\r",
							"    }\r",
							"\r",
							"});\r",
							"\r",
							"/************* FUNCTIONS*****************/\r",
							"\r",
							"    function returnFunction(){\r",
							"        console.log(returnComment+\" - \"+ returnDescription+\" - \"+returnException);\r",
							"    }\r",
							"\r",
							"/***************************************/\r",
							"\r",
							"pm.test(\"Command is correctly invoked\", function () {\r",
							"    returnFunction();\r",
							"    pm.expect(response).to.include(pm.environment.get(\"okCommand\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt number is correct\", function () {\r",
							"    pm.expect(numReceipt).to.eql(pm.environment.get(\"numReceipt\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt type is correct\", function () {\r",
							"    pm.expect(typeReceipt).to.eql(pm.environment.get(\"typeReceipt\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt efectivity is correct\", function () {\r",
							"    pm.expect(receiptEfect).to.eql(pm.environment.get(\"receiptEfect\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt emission is correct\", function () {\r",
							"    pm.expect(receiptEmision).to.eql(pm.environment.get(\"receiptEmision\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt end is correct\", function () {\r",
							"    pm.expect(receiptDue).to.eql(pm.environment.get(\"endReceipt\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Net receipt is correct\", function () {\r",
							"    pm.expect(netReceipt).to.eql(pm.environment.get(\"netReceipt\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt taxes are correct\", function () {\r",
							"    pm.expect(receiptTaxes).to.eql(pm.environment.get(\"receiptTaxes\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt total is correct\", function () {\r",
							"    pm.expect(totalReceipt).to.eql(pm.environment.get(\"totalReceipt\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt comission is correct\", function () {\r",
							"    pm.expect(receiptTaxesCommission).to.eql(pm.environment.get(\"receiptComission\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt IRPF is correct\", function () {\r",
							"    pm.expect(receiptIRPF).to.eql(pm.environment.get(\"receiptIRPF\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Liquid comission is correct\", function () {\r",
							"    pm.expect(liquidComissionReceipt).to.eql(pm.environment.get(\"liquidComissionReceipt\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Liquid CIA is correct\", function () {\r",
							"    pm.expect(liquidCIAReceipt).to.eql(pm.environment.get(\"liquidCIAReceipt\"));\r",
							"});\r",
							"\r",
							"pm.test(\"SW Cartera is correct\", function () {\r",
							"    pm.expect(swCartera).to.eql(pm.environment.get(\"swCartera\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Canal is correct\", function () {\r",
							"    pm.expect(canalReceipt).to.eql(pm.environment.get(\"canalReceipt\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt payment method is correct\", function () {\r",
							"    pm.expect(receiptPaymentMethod).to.eql(pm.environment.get(\"receiptPaymentMethod\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt status method is correct\", function () {\r",
							"    pm.expect(receiptStatus).to.eql(pm.environment.get(\"receiptState\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt policy is correct\", function () {\r",
							"    pm.expect(receiptPolicy).to.eql(pm.environment.get(\"receiptPolicy\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt policy taker is correct\", function () {\r",
							"    pm.expect(receiptPolicyTaker).to.eql(pm.environment.get(\"receiptTaker\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Receipt policy product is correct\", function () {\r",
							"    pm.expect(receiptPolicyProduct).to.eql(pm.environment.get(\"receiptProduct\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Net policy receipt is correct\", function () {\r",
							"    pm.expect(receiptNetPolicy).to.eql(pm.environment.get(\"netPolicyReceipt\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Comission policy receipt is correct\", function () {\r",
							"    pm.expect(receiptPolicyCommission).to.eql(pm.environment.get(\"commissionPolicyReceipt\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Risk receipt is correct\", function () {\r",
							"    pm.expect(receiptPolicyRiskType).to.eql(pm.environment.get(\"riskReceipt\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Description risk receipt is correct\", function () {\r",
							"    pm.expect(receiptPolicyRiskDesc).to.eql(pm.environment.get(\"riskDescriptionReceipt\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "text/xml; charset=utf-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sisnet.framework.webservices.jaxws\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <urn:execute>\r\n         <!--Optional:-->\r\n         <arg0>RECIBO</arg0>\r\n         <!--Optional:-->\r\n         <arg1>\r\n         <![CDATA[\r\n            <ROOT>\r\n            <COMANDO>\r\n               <CODIGO>RECIBO</CODIGO>\r\n               <TIPODUSO>VOID</TIPODUSO>\r\n               <VERSION>1</VERSION>\r\n            </COMANDO>\r\n            <SESION>\r\n               <IDSESION>{{idSesion}}</IDSESION>\r\n            </SESION>\r\n            <ENTRADA>\r\n               <NUMERECI>{{numReceipt}}</NUMERECI>\r\n            </ENTRADA>\r\n            </ROOT>\r\n        ]]>\r\n         </arg1>\r\n      </urn:execute>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{resource}}/WSSISNet?wsdl",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{resource}}",
						"WSSISNet"
					],
					"query": [
						{
							"key": "wsdl",
							"value": null
						}
					]
				}
			},
			"response": [
				{
					"name": "CONSDATOSCLI Command",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sisnet.framework.webservices.jaxws\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <urn:execute>\r\n         <!--Optional:-->\r\n         <arg0>CONSDATOSCLI</arg0>\r\n         <!--Optional:-->\r\n         <arg1>\r\n         <![CDATA[\r\n            <ROOT>\r\n            <COMANDO>\r\n               <CODIGO>CONSDATOSCLI</CODIGO>\r\n               <TIPODUSO>VOID</TIPODUSO>\r\n               <VERSION>1</VERSION>\r\n            </COMANDO>\r\n            <SESION>\r\n               <IDSESION>WSSISnetesbarint01U212I182362168ddb41fc24b09524eb31714463</IDSESION>\r\n            </SESION>\r\n            <ENTRADA>\r\n               <ID_PERSONA/>\r\n               <NUMEDOCU>43397684L</NUMEDOCU>\r\n               <TIPODOCU>NIF</TIPODOCU>\r\n            </ENTRADA>\r\n            </ROOT>\r\n        ]]>\r\n         </arg1>\r\n      </urn:execute>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://esbarint01.esbar.dasnet:8080/SisnetINT/WSSISNet?wsdl",
							"protocol": "http",
							"host": [
								"esbarint01",
								"esbar",
								"dasnet"
							],
							"port": "8080",
							"path": [
								"SisnetINT",
								"WSSISNet"
							],
							"query": [
								{
									"key": "wsdl",
									"value": null
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "xml",
					"header": [
						{
							"key": "Cache-control",
							"value": "no-cache, must-revalidate, no-store"
						},
						{
							"key": "Expires",
							"value": "-1"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "X-UA-Compatible",
							"value": "IE=Edge"
						},
						{
							"key": "Content-Type",
							"value": "text/xml;charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Tue, 07 Jul 2020 12:18:29 GMT"
						}
					],
					"cookie": [],
					"body": "<?xml version='1.0' encoding='UTF-8'?>\n<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <SOAP-ENV:Header/>\n    <S:Body>\n        <ns2:executeResponse xmlns:ns2=\"urn:sisnet.framework.webservices.jaxws\">\n            <return>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n&lt;ROOT>\n&lt;RETORNO>\n&lt;CODIGO>0&lt;/CODIGO>\n&lt;DESCRIPCION>Comando invocado correctamente.&lt;/DESCRIPCION>\n&lt;EXCEPCION>&lt;/EXCEPCION>\n&lt;COMENTARIO>&lt;/COMENTARIO>\n&lt;AVISOS>\n&lt;/AVISOS>\n\n&lt;/RETORNO>\n&lt;RESPUESTA>\n&lt;CLIENTE>\n&lt;ID_DPERSONA>190753&lt;/ID_DPERSONA>\n&lt;NOMBRE>FIQ&amp;#209;ISSA &amp;#209;USE,CAET&lt;/NOMBRE>\n&lt;APELLIDO1>&lt;/APELLIDO1>\n&lt;APELLIDO2>&lt;/APELLIDO2>\n&lt;TIPODOC>NIF&lt;/TIPODOC>\n&lt;NACIMIENTO>&lt;/NACIMIENTO>\n&lt;NUMERODOC>43397684L&lt;/NUMERODOC>\n&lt;ID_DPEDOMI>246747&lt;/ID_DPEDOMI>\n&lt;PROVINCIA>08&lt;/PROVINCIA>\n&lt;CP>08041&lt;/CP>\n&lt;POBLACION>BARCELONA&lt;/POBLACION>\n&lt;DESPOBLACION>&lt;/DESPOBLACION>\n&lt;TIPOVIA>&lt;/TIPOVIA>\n&lt;DOMICILIO>C. XIPRER 4-6 2.3.&lt;/DOMICILIO>\n&lt;NUMERO>&lt;/NUMERO>\n&lt;PORTAL>&lt;/PORTAL>\n&lt;ESCALERA>&lt;/ESCALERA>\n&lt;PISO>&lt;/PISO>\n&lt;PUERTA>&lt;/PUERTA>\n&lt;DATOS_CONTACTO>\n&lt;CONTACTO>\n&lt;ID_DPEDCONT>194194&lt;/ID_DPEDCONT>\n&lt;TIPO>EMAIL&lt;/TIPO>\n&lt;DATO>silviatost@gmail.com&lt;/DATO>\n&lt;PRIORIDAD>0&lt;/PRIORIDAD>\n&lt;CANAL_NOTIFICACIONES>&lt;/CANAL_NOTIFICACIONES>\n&lt;/CONTACTO>\n&lt;CONTACTO>\n&lt;ID_DPEDCONT>194193&lt;/ID_DPEDCONT>\n&lt;TIPO>TELEFONO&lt;/TIPO>\n&lt;DATO>+34 934569897&lt;/DATO>\n&lt;PRIORIDAD>0&lt;/PRIORIDAD>\n&lt;CANAL_NOTIFICACIONES>&lt;/CANAL_NOTIFICACIONES>\n&lt;/CONTACTO>\n&lt;/DATOS_CONTACTO>\n&lt;/CLIENTE>\n\n&lt;/RESPUESTA>\n&lt;/ROOT></return>\n        </ns2:executeResponse>\n    </S:Body>\n</S:Envelope>"
				}
			]
		}
	],
	"protocolProfileBehavior": {}
}